vmType: vz
rosetta:
  enabled: true
  binfmt: true
images:
  - location: https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img
    arch: aarch64
networks:
  - lima: shared
mountType: virtiofs
cpus: 1
memory: 2G
disk: 40G

containerd:
  system: false
  user: false

provision:
  - mode: system
    script: |
      #!/bin/bash
      set -ux -o pipefail
      export DEBIAN_FRONTEND=noninteractive

      function update_resolv_conf {
        echo >&2 "updating /etc/resolv.conf"

        rm -f /etc/resolv.conf
        cat << EOF > /etc/resolv.conf
      nameserver 127.0.0.53
      options edns0 trust-ad
      search .
      EOF
      }

      function add_amd64_support {
        echo >&2 "adding amd64 support to OS"

        dpkg --add-architecture amd64
        sed -i -e 's|deb http://|deb [arch=arm64] http://|g' /etc/apt/sources.list
        cat << EOF > /etc/apt/sources.list.d/jammy-amd64.list
      deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted
      deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted
      deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy universe
      deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates universe
      deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy multiverse
      deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates multiverse
      deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security main restricted
      deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security universe
      deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security multiverse
      EOF
        apt update   
      }

      function install_net_tools {
        echo >&2 "installing network tools"

        apt install -y net-tools
      }

      function install_k3s {
        echo >&2 "installing k3s"

        apt install -y python3-pip jq
        pip3 install yq

        tls_san_args=""
        for s in $EXTRA_SANS; do
          tls_san_args="${tls_san_args} --tls-san $s"
        done
        mkdir -p /srv/k8s/csi/localstore
        TOKEN=$(openssl rand -hex 20)
        NODE_NAME=$(hostname -s)
        NODE_IP=$(ifconfig lima0 | grep 'inet ' | awk '{print $2}')
        curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server" sh -s - \
          --token $TOKEN --cluster-init --write-kubeconfig-mode 0640 --node-name $HOSTNAME \
          --cluster-cidr $CLUSTER_CIDR --service-cidr $SERVICE_CIDR \
          --default-local-storage-path /srv/k8s/csi/localstore \
          --tls-san ${NODE_IP} ${tls_san_args} \
          --node-taint node-role.kubernetes.io/control-plane=true:NoSchedule \
          --advertise-address ${NODE_IP} --kubelet-arg node-ip=${NODE_IP} \
          --flannel-iface lima0 \
          --disable traefik
        sleep 2
        sed -e "s|127.0.0.1|${NODE_IP}|g" /etc/rancher/k3s/k3s.yaml > /etc/rancher/k3s/k3s-remote.yaml
        yq -i -y ".clusters[0].name = \"${KUBECONFIG_CLUSTER}\"" /etc/rancher/k3s/k3s-remote.yaml
        yq -i -y ".contexts[0].name = \"${KUBECONFIG_CONTEXT}\"" /etc/rancher/k3s/k3s-remote.yaml
        yq -i -y ".contexts[0].context.cluster = \"${KUBECONFIG_CLUSTER}\"" /etc/rancher/k3s/k3s-remote.yaml
        yq -i -y ".[\"current-context\"] = \"${KUBECONFIG_CONTEXT}\"" /etc/rancher/k3s/k3s-remote.yaml
        chmod 0640 /etc/rancher/k3s/k3s-remote.yaml

        mkdir -p /etc/rancher/k3s
        echo $NODE_IP >/etc/rancher/k3s/node-ip
      }

      # use static resolver, not domains from DHCP/host
      if grep -q 'search .' /etc/resolv.conf; then
        update_resolv_conf
      fi

      # add amd64 binary support
      if [ ! -f /etc/apt/sources.list.d/jammy-amd64.list ]; then
        add_amd64_support
      fi

      # install net tools
      if ! command -v ifconfig >/dev/null 2>&1; then
        install_net_tools
      fi

      # install k3s
      if ! command -v kubectl >/dev/null 2>&1; then
        install_k3s
      fi

      # finish system provisioning
      #   make sure the readiness probe has already created the file before attempting to remove the lock
      while [ ! -f /tmp/lima-system-provisioning.lock ]; do
        sleep 1
      done
      rm -f /tmp/lima-system-provisioning.lock

probes:
  - mode: readiness
    description: wait for provisioning scripts to complete
    script: |
      #!/bin/bash
      set -eux -o pipefail
      touch /tmp/lima-system-provisioning.lock

      # wait up to 10 minutes for system provisioning scripts to complete
      if ! timeout 600s bash -c "until [ ! -f /tmp/lima-system-provisioning.lock ]; do sleep 1; done"; then
        echo >&2 "one or more system provisioning scripts have not completed within timeout window"
        exit 1
      fi
    hint: |
      See /var/log/cloud-init-output.log in the guest.

message: |
  To join worker nodes to the cluster, you'll need to retrieve the node token by running the command:
  -----
  limactl shell {{.Name}} sudo cat /var/lib/rancher/k3s/server/node-token
  -----

  To retrieve the cluster IP for this node, run the command:
  -----
  limactl shell {{.Name}} sudo cat /etc/rancher/k3s/node-ip
  -----

  To access the cluster via its local IP address, run the commands:
  -----
  mkdir -p ~/.kube/config.d
  limactl shell {{.Name}} sudo cat /etc/rancher/k3s/k3s-remote.yaml > ~/.kube/config.d/{{.Name}}
  export KUBECONFIG=$HOME/.kube/config.d/{{.Name}}
  kubectl get nodes
  -----
