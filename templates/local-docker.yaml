vmType: vz
rosetta:
  enabled: true
  binfmt: true
images:
  - location: https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img
    arch: aarch64
networks:
  - lima: shared
mountType: virtiofs

containerd:
  system: false
  user: false

provision:
  - mode: system
    script: |
      #!/bin/bash
      set -ux -o pipefail
      export DEBIAN_FRONTEND=noninteractive

      function add_amd64_support {
        echo >&2 "adding amd64 support to OS"

        dpkg --add-architecture amd64
        sed -i -e 's|deb http://|deb [arch=arm64] http://|g' /etc/apt/sources.list
        cat <<- EOF > /etc/apt/sources.list.d/jammy-amd64.list
      	deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted
      	deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted
      	deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy universe
      	deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates universe
      	deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy multiverse
      	deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates multiverse
      	deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security main restricted
      	deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security universe
      	deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security multiverse
      	EOF
        apt update   
      }

      function install_docker {
        echo >&2 "installing docker"

        curl -fsSL https://get.docker.com | sh
        systemctl disable --now docker
        apt install -y uidmap dbus-user-session
      }

      function install_net_tools {
        echo >&2 "installing network tools"

        apt install -y net-tools
      }

      # use static resolver, not domains from DHCP/host
      echo >&2 "updating /etc/resolv.conf"
      rm /etc/resolv.conf
      cat <<- EOF > /etc/resolv.conf
      nameserver 127.0.0.53
      options edns0 trust-ad
      search .
      EOF

      # add amd64 binary support
      if [ ! -f /etc/apt/sources.list.d/jammy-amd64.list ]; then
        add_amd64_support
      fi

      # install net tools
      if ! command -v ifconfig >/dev/null 2>&1; then
        install_net_tools
      fi

      # install docker
      if ! command -v docker >/dev/null 2>&1; then
        install_docker
      fi
  - mode: user
    script: |
      #!/bin/bash
      set -eux -o pipefail
      systemctl --user start dbus
      dockerd-rootless-setuptool.sh install
      docker context use rootless
probes:
  - mode: readiness
    description: wait for provisioning scripts to complete
    script: |
      #!/bin/bash
      set -eux -o pipefail
      # docker is the last tool to get installed so wait for that check during setup
      if ! timeout 60s bash -c "until command -v docker; do sleep 3; done"; then
        echo >&2 "docker is not installed yet"
        exit 1
      fi
      if ! timeout 60s bash -c "until pgrep rootlesskit; do sleep 3; done"; then
        echo >&2 "rootlesskit is not running yet"
        exit 1
      fi
    hint: |
      See /var/log/cloud-init-output.log in the guest.

portForwards:
  - guestSocket: "/run/user/{{.UID}}/docker.sock"
    hostSocket: "{{.Dir}}/sock/docker.sock"
message: |
  To run `docker` on the local host, run the following commands:
  -----
  docker context create lima-{{.Name}} --docker "host=unix://{{.Dir}}/sock/docker.sock"
  docker context use lima-{{.Name}}
  docker run hello-world
  -----

